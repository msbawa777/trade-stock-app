{"version":3,"sources":["components/StockRow.js","components/StockList.js","components/StockDetail.js","pages/Dashboard.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["timeSince","date","Date","intervalType","seconds","Math","floor","interval","hours","getHours","minutes","getMinutes","ampm","formatAMPM","StockRow","text","stockName","price","color","createdAt","onItemSelection","onClick","toUpperCase","style","toFixed","getTwoDigitFixedValue","StockList","props","header","map","title","index","data","Object","keys","stockItem","lastAddedItem","history","length","secondLastAddedItem","getListItemInfo","defaultProps","capitalizeWords","StockDetail","useState","setData","useEffect","forEach","isSelected","getMapData","name","array","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","prices","push","getSeconds","Number","min","max","className","width","height","client","reconnect","Dashboard","stocks","connect","WebSocket","onopen","msg","console","log","onmessage","message","addNewStockValue","JSON","parse","onclose","setTimeout","onerror","close","stock","timestamp","now","existingStocks","_price","existingStockItem","slice","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6502316.chunk.js","sourcesContent":["import React from 'react';\n\nconst StockRow = ({stockName , price, color, createdAt, onItemSelection}) => {\n\n    const getTwoDigitFixedValue = (price) => {\n        return price.toFixed(2);\n    }\n\n    const capitalizeWords = (text) => {\n        return text.toUpperCase();\n    }\n\n    return (\n        <tr onClick = {() => onItemSelection(stockName)}>\n            <td>{capitalizeWords(stockName)}</td>\n            <td style={{color : `${color}`}}>{getTwoDigitFixedValue(price)}</td>\n            <td >{timeSince(createdAt)}</td>\n        </tr>\n    );\n}\n\n\nfunction timeSince(date) {\n    if (typeof date !== 'object') {\n        date = new Date(date);\n    }\n\n    const seconds = Math.floor((new Date() - date) / 1000);\n    let intervalType;\n\n    let interval = Math.floor(seconds / 31536000);\n    if (interval >= 1) {\n        intervalType = 'year';\n    } else {\n        interval = Math.floor(seconds / 2592000);\n        if (interval >= 1) {\n            intervalType = 'month';\n        } else {\n            interval = Math.floor(seconds / 86400);\n            if (interval >= 1) {\n                intervalType = 'day';\n            } else {\n                interval = Math.floor(seconds / 3600);\n                if (interval >= 1) {\n                    intervalType = \"hour\";\n                } else {\n                    interval = Math.floor(seconds / 60);\n                    if (interval >= 1) {\n                        intervalType = \"minute\";\n                    } else {\n                        interval = seconds;\n                        intervalType = \"second\";\n                    }\n                }\n            }\n        }\n    }\n    if (interval > 1 || interval === 0) {\n        intervalType += 's';\n    }\n\n    if(intervalType === \"seconds\" && interval < 10){\n        return 'A few seconds ago';\n    }else{\n        return formatAMPM(date);\n    }\n    //return interval + ' ' + intervalType + ' ago';\n};\n\nfunction formatAMPM(date) {\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    const strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n}\n\nexport default StockRow;","import React from 'react';\nimport StockRow from './StockRow';\n\nconst defaultProps = {\n    header : [\n        'Symbol' , 'Price' , 'Last Update'\n    ]\n}\nconst StockList = (props) => {\n\n    const getListItemInfo = (stockItem) => {\n        let color = 'green';\n        const lastAddedItem = stockItem.history[stockItem.history.length - 1];\n        if(stockItem.history.length >= 2){\n            const secondLastAddedItem = stockItem.history[stockItem.history.length - 2];\n            color = lastAddedItem.price < secondLastAddedItem.price ? 'red' : 'green';\n        }\n        return {\n            color, \n            price : lastAddedItem.price,\n            createdAt : lastAddedItem.createdAt\n        }\n    }\n\n    return (\n        <div style={{'overflowX':'auto'}}>\n            <table>\n                <thead>\n                    <tr>\n                        {props.header.map((title, index) => <th key = {index}>{title}</th>)}\n                    </tr>\n                </thead>\n\n                <tbody>\n\n                    {\n                        props.data && Object.keys(props.data).map(( stockName, index) => {\n                            const {color, price, createdAt} = getListItemInfo(props.data[stockName])\n                            return (\n                                <StockRow  \n                                    onItemSelection = {props.onItemSelection}\n                                    key = {index}\n                                    stockName = {stockName} \n                                    price = {price}\n                                    color = {color}\n                                    createdAt = {createdAt}\n                                />\n                            );\n                        })\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n\nStockList.defaultProps = defaultProps;\nexport default StockList;","import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst capitalizeWords = (text) => {\n    return text.toUpperCase();\n}\n\nconst StockDetail = (props) => {\n    \n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        const data = {};\n        props.data && Object.keys(props.data).forEach((stockName) => {\n            const isSelected = props.data[stockName].isSelected;\n            if(isSelected){\n                data[stockName] = props.data[stockName].history;\n            }\n        });\n        if(!Object.keys(data).length && Object.keys(props.data).length){\n            const stockName = Object.keys(props.data)[0];\n            data[stockName] = props.data[stockName].history\n        }\n        setData(data);\n    },[props]);\n\n    const getMapData = (name, array) => {\n        const data = {\n            labels : [],\n            datasets : [],\n        }\n        const datasets = {\n            label: capitalizeWords(name), \n            fill: true,\n            backgroundColor: 'rgba(0,103,184,.1)',\n            borderColor: 'rgba(0,103,184,1)',\n            borderWidth: 1,\n            data : []\n        };\n        const prices = [];\n        array.forEach(({price, createdAt}) => {\n            prices.push(price);\n            data.labels.push(formatAMPM(new Date(createdAt)));\n            datasets.data.push(Number(price.toFixed(2)))\n        });\n        const min = Math.min(...prices).toFixed(2);\n        const max = Math.max(...prices).toFixed(2)\n        datasets.label = capitalizeWords(name) +` (Low: ${min} | High: ${max})`;\n        data.datasets.push(datasets);\n        return data;\n    }\n    \n    return (\n        <div className=\"stock-detail\">\n            {data && (Object.keys(data).length > 0) &&Object.keys(data).map(( stockName, index) => {\n                const history = data[stockName];\n                return (\n                    <Line\n                        data={getMapData(stockName, history)}\n                        width={500}\n                        height={300}\n                        key = {index}\n                    />\n                );\n                \n            })}\n        </div>\n    );\n}\n\nfunction formatAMPM(date) {\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? '0'+minutes : minutes;\n    const strTime = hours + ':' + minutes + \":\"+seconds + ' ' + ampm;\n    return strTime;\n}\nexport default StockDetail;","import React, { useEffect, useState } from 'react';\nimport StockList from '../components/StockList';\nimport StockDetail from '../components/StockDetail';\n\nconst url = 'ws://stocks.mnet.website';\n\nlet client = null;\nlet reconnect = true;\n\n\nconst Dashboard = () => {\n\n    const [data, setData] = useState({\n        stocks : {}\n    });\n\n    const connect = () => {\n        client = new WebSocket(url);\n        client.onopen = (msg) => { console.log('msg', msg)};\n        client.onmessage = (message) => {\n            console.log(message);\n            message && message.data && addNewStockValue(JSON.parse(message.data))\n        };    \n        client.onclose = () => {\n            setTimeout(() => {\n                reconnect && connect();\n            }, 1000);\n        }\n        client.onerror = () => {\n            client && client.close();\n        }\n    }\n\n    useEffect(() => {\n        reconnect = true;\n        connect();\n        return () => {\n            reconnect = false;\n            client && client.close();\n        }\n    });\n\n    const onItemSelection = (stockName) => {\n        Object.keys(data.stocks).forEach(stockName => {\n            const isSelected = data.stocks[stockName].isSelected || false;\n            if(isSelected){\n                data.stocks[stockName].isSelected = false;\n            }\n        })\n        const existingStockItem = data.stocks[stockName];\n        existingStockItem.isSelected = true;\n        setData({\n            stocks : data.stocks\n        });\n    }\n\n    const addNewStockValue = (stock) => {\n\n        const timestamp = Date.now();\n        const existingStocks = data.stocks;\n\n        stock.forEach(([name, price]) => {\n            const _price = Number(price);\n            if(existingStocks[name]){\n                const existingStockItem = existingStocks[name];\n                existingStockItem.price = _price;\n                existingStockItem.isSelected = existingStockItem.isSelected || false;\n                if(existingStockItem.history.length > 80){\n                    existingStockItem.history = existingStockItem.history.slice(50);\n                }\n                existingStockItem.history.push({ createdAt : timestamp, price : _price});\n            }else{\n                existingStocks[name] = { price : _price, history : [{ createdAt : timestamp, price : _price}], isSelected : false};\n            }\n        });\n        setData({\n            stocks : existingStocks\n        });\n    }\n\n    console.log(data);\n    return (\n        <div className=\"dashboard\">\n            {\n                Object.keys(data.stocks).length > 0 ? \n                <>\n                    <main className=\"data-list\">\n                    {data && data.stocks && \n                        <StockList \n                            data={data.stocks} \n                            onItemSelection={onItemSelection}\n                        />\n                    }\n                    </main>\n                    <aside className=\"data-detail\">\n                        <StockDetail \n                            data={data.stocks} \n                        />\n                    </aside>\n                </> \n                : \n                <center style={{'flex' : 1}}>\n                    <p>Please wait while we are fetching the data from server...</p>\n                </center>\n            }\n            \n        </div>\n    );\n}\n\nexport default Dashboard;","import React from 'react';\n\nconst defaultProps = {\n    title : 'Stock App'\n};\n\nconst Header = ({title}) => {\n    return (\n        <header>\n            <center>\n                <h1>{title}</h1>\n            </center>\n        </header>\n    );\n}\n\nHeader.defaultProps = defaultProps;\nexport default Header;","import './App.css';\nimport Dashboard from './pages/Dashboard';\nimport Header from './components/Header';\n\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <Dashboard />\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}